Program
	MainClass TreeVisitor (line 5)
		Print (line 7)
			((new TV()).Start())

	Class TV (line 11)

		Start :: () -> int (line 13)
			root :: Tree
			ntb :: boolean
			nti :: int
			v :: MyVisitor
			Assign (line 19)
				root := new Tree()
			Assign (line 20)
				ntb := ((root).Init(16))
			Assign (line 21)
				ntb := ((root).Print())
			Print (line 22)
				100000000
			Assign (line 23)
				ntb := ((root).Insert(8))
			Assign (line 24)
				ntb := ((root).Insert(24))
			Assign (line 25)
				ntb := ((root).Insert(4))
			Assign (line 26)
				ntb := ((root).Insert(12))
			Assign (line 27)
				ntb := ((root).Insert(20))
			Assign (line 28)
				ntb := ((root).Insert(28))
			Assign (line 29)
				ntb := ((root).Insert(14))
			Assign (line 30)
				ntb := ((root).Print())
			Print (line 31)
				100000000
			Assign (line 32)
				v := new MyVisitor()
			Print (line 33)
				50000000
			Assign (line 34)
				nti := ((root).accept(v))
			Print (line 35)
				100000000
			Print (line 36)
				((root).Search(24))
			Print (line 37)
				((root).Search(12))
			Print (line 38)
				((root).Search(16))
			Print (line 39)
				((root).Search(50))
			Print (line 40)
				((root).Search(12))
			Assign (line 41)
				ntb := ((root).Delete(12))
			Assign (line 42)
				ntb := ((root).Print())
			Print (line 43)
				((root).Search(12))
			return 0

	Class Tree (line 50)
		left :: Tree
		right :: Tree
		key :: int
		has_left :: boolean
		has_right :: boolean
		my_null :: Tree
		Init :: () -> boolean (line 72)
			Assign (line 73)
				key := v_key
			Assign (line 74)
				has_left := true
			Assign (line 75)
				has_right := true
			return true

		SetRight :: () -> boolean (line 79)
			Assign (line 80)
				right := rn
			return true

		SetLeft :: () -> boolean (line 84)
			Assign (line 85)
				left := ln
			return true

		GetRight :: () -> Tree (line 89)
			return right

		GetLeft :: () -> Tree (line 93)
			return left

		GetKey :: () -> int (line 97)
			return key

		SetKey :: () -> boolean (line 101)
			Assign (line 102)
				key := v_key
			return true

		GetHas_Right :: () -> boolean (line 106)
			return has_right

		GetHas_Left :: () -> boolean (line 110)
			return has_left

		SetHas_Left :: () -> boolean (line 114)
			Assign (line 115)
				has_left := val
			return true

		SetHas_Right :: () -> boolean (line 119)
			Assign (line 120)
				has_right := val
			return true

		Compare :: (num2: int) -> boolean (line 124)
			ntb :: boolean
			nti :: int
			Assign (line 128)
				ntb := true
			Assign (line 129)
				nti := (num2 + 1)
			If (num1 < num2) (line 130)
				Assign (line 131)
					ntb := true
			Else
				If !((num1 < nti)) (line 132)
					Assign (line 133)
						ntb := true
				Else
					Assign (line 135)
						ntb := true
			return ntb

		Insert :: () -> boolean (line 139)
			new_node :: Tree
			ntb :: boolean
			current_node :: Tree
			cont :: boolean
			key_aux :: int
			Assign (line 146)
				new_node := new Tree()
			Assign (line 147)
				ntb := ((new_node).Init(v_key))
			Assign (line 148)
				current_node := this
			Assign (line 149)
				cont := true
			While cont (line 150)
				Block (line 150)
					Assign (line 151)
						key_aux := ((current_node).GetKey())
					If (v_key < key_aux) (line 152)
						Block (line 152)
							If ((current_node).GetHas_Left()) (line 153)
								Assign (line 154)
									current_node := ((current_node).GetLeft())
							Else
								Block (line 155)
									Assign (line 156)
										cont := true
									Assign (line 157)
										ntb := ((current_node).SetHas_Left(true))
									Assign (line 158)
										ntb := ((current_node).SetLeft(new_node))


					Else
						Block (line 160)
							If ((current_node).GetHas_Right()) (line 161)
								Assign (line 162)
									current_node := ((current_node).GetRight())
							Else
								Block (line 163)
									Assign (line 164)
										cont := true
									Assign (line 165)
										ntb := ((current_node).SetHas_Right(true))
									Assign (line 166)
										ntb := ((current_node).SetRight(new_node))



			return true

		Delete :: () -> boolean (line 173)
			current_node :: Tree
			parent_node :: Tree
			cont :: boolean
			found :: boolean
			ntb :: boolean
			is_root :: boolean
			key_aux :: int
			Assign (line 182)
				current_node := this
			Assign (line 183)
				parent_node := this
			Assign (line 184)
				cont := true
			Assign (line 185)
				found := true
			Assign (line 186)
				is_root := true
			While cont (line 187)
				Block (line 187)
					Assign (line 188)
						key_aux := ((current_node).GetKey())
					If (v_key < key_aux) (line 189)
						If ((current_node).GetHas_Left()) (line 190)
							Block (line 190)
								Assign (line 191)
									parent_node := current_node
								Assign (line 192)
									current_node := ((current_node).GetLeft())

						Else
							Assign (line 194)
								cont := true
					Else
						If (key_aux < v_key) (line 195)
							If ((current_node).GetHas_Right()) (line 196)
								Block (line 196)
									Assign (line 197)
										parent_node := current_node
									Assign (line 198)
										current_node := ((current_node).GetRight())

							Else
								Assign (line 200)
									cont := true
						Else
							Block (line 201)
								If is_root (line 202)
									If (!(((current_node).GetHas_Right())) && !(((current_node).GetHas_Left()))) (line 203)
										Assign (line 205)
											ntb := true
									Else
										Assign (line 207)
											ntb := ((this).Remove(parent_node, current_node))
								Else
									Assign (line 209)
										ntb := ((this).Remove(parent_node, current_node))
								Assign (line 210)
									found := true
								Assign (line 211)
									cont := true

					Assign (line 213)
						is_root := true

			return found

		Remove :: (c_node: Tree) -> boolean (line 218)
			ntb :: boolean
			auxkey1 :: int
			auxkey2 :: int
			If ((c_node).GetHas_Left()) (line 223)
				Assign (line 224)
					ntb := ((this).RemoveLeft(p_node, c_node))
			Else
				If ((c_node).GetHas_Right()) (line 225)
					Assign (line 226)
						ntb := ((this).RemoveRight(p_node, c_node))
				Else
					Block (line 227)
						Assign (line 228)
							auxkey1 := ((c_node).GetKey())
						Assign (line 229)
							auxkey2 := ((((p_node).GetLeft())).GetKey())
						If ((this).Compare(auxkey1, auxkey2)) (line 230)
							Block (line 230)
								Assign (line 231)
									ntb := ((p_node).SetLeft(my_null))
								Assign (line 232)
									ntb := ((p_node).SetHas_Left(true))

						Else
							Block (line 233)
								Assign (line 234)
									ntb := ((p_node).SetRight(my_null))
								Assign (line 235)
									ntb := ((p_node).SetHas_Right(true))


			return true

		RemoveRight :: (c_node: Tree) -> boolean (line 241)
			ntb :: boolean
			While ((c_node).GetHas_Right()) (line 243)
				Block (line 243)
					Assign (line 244)
						ntb := ((c_node).SetKey(((((c_node).GetRight())).GetKey())))
					Assign (line 245)
						p_node := c_node
					Assign (line 246)
						c_node := ((c_node).GetRight())

			Assign (line 248)
				ntb := ((p_node).SetRight(my_null))
			Assign (line 249)
				ntb := ((p_node).SetHas_Right(true))
			return true

		RemoveLeft :: (c_node: Tree) -> boolean (line 253)
			ntb :: boolean
			While ((c_node).GetHas_Left()) (line 255)
				Block (line 255)
					Assign (line 256)
						ntb := ((c_node).SetKey(((((c_node).GetLeft())).GetKey())))
					Assign (line 257)
						p_node := c_node
					Assign (line 258)
						c_node := ((c_node).GetLeft())

			Assign (line 260)
				ntb := ((p_node).SetLeft(my_null))
			Assign (line 261)
				ntb := ((p_node).SetHas_Left(true))
			return true

		Search :: () -> int (line 265)
			current_node :: Tree
			ifound :: int
			cont :: boolean
			key_aux :: int
			Assign (line 271)
				current_node := this
			Assign (line 272)
				cont := true
			Assign (line 273)
				ifound := 0
			While cont (line 274)
				Block (line 274)
					Assign (line 275)
						key_aux := ((current_node).GetKey())
					If (v_key < key_aux) (line 276)
						If ((current_node).GetHas_Left()) (line 277)
							Assign (line 278)
								current_node := ((current_node).GetLeft())
						Else
							Assign (line 280)
								cont := true
					Else
						If (key_aux < v_key) (line 281)
							If ((current_node).GetHas_Right()) (line 282)
								Assign (line 283)
									current_node := ((current_node).GetRight())
							Else
								Assign (line 285)
									cont := true
						Else
							Block (line 286)
								Assign (line 287)
									ifound := 1
								Assign (line 288)
									cont := true


			return ifound

		Print :: () -> boolean (line 294)
			ntb :: boolean
			current_node :: Tree
			Assign (line 298)
				current_node := this
			Assign (line 299)
				ntb := ((this).RecPrint(current_node))
			return true

		RecPrint :: () -> boolean (line 303)
			ntb :: boolean
			If ((node).GetHas_Left()) (line 306)
				Block (line 306)
					Assign (line 307)
						ntb := ((this).RecPrint(((node).GetLeft())))

			Else
				Assign (line 309)
					ntb := true
			Print (line 310)
				((node).GetKey())
			If ((node).GetHas_Right()) (line 311)
				Block (line 311)
					Assign (line 312)
						ntb := ((this).RecPrint(((node).GetRight())))

			Else
				Assign (line 314)
					ntb := true
			return true

		accept :: () -> int (line 318)
			nti :: int
			Print (line 321)
				333
			Assign (line 322)
				nti := ((v).visit(this))
			return 0

	Class Visitor (line 328)
		l :: Tree
		r :: Tree
		visit :: () -> int (line 332)
			nti :: int
			If ((n).GetHas_Right()) (line 335)
				Block (line 335)
					Assign (line 336)
						r := ((n).GetRight())
					Assign (line 337)
						nti := ((r).accept(this))

			Else
				Assign (line 339)
					nti := 0
			If ((n).GetHas_Left()) (line 341)
				Block (line 341)
					Assign (line 342)
						l := ((n).GetLeft())
					Assign (line 343)
						nti := ((l).accept(this))

			Else
				Assign (line 345)
					nti := 0
			return 0

	Class MyVisitor extends Visitor (line 352)

		visit :: () -> int (line 354)
			nti :: int
			If ((n).GetHas_Right()) (line 357)
				Block (line 357)
					Assign (line 358)
						r := ((n).GetRight())
					Assign (line 359)
						nti := ((r).accept(this))

			Else
				Assign (line 361)
					nti := 0
			Print (line 363)
				((n).GetKey())
			If ((n).GetHas_Left()) (line 365)
				Block (line 365)
					Assign (line 366)
						l := ((n).GetLeft())
					Assign (line 367)
						nti := ((l).accept(this))

			Else
				Assign (line 369)
					nti := 0
			return 0
