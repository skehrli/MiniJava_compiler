/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal CLASS, PUBLIC, STATIC, VOID,
         MAIN, EXTENDS, THIS, NEW, STRING, SOPLN, LENGTH;

/* control flow constructs */
terminal IF, ELSE, WHILE, RETURN;

/* types */
terminal INT, BOOLEAN;

/* constants */
terminal TRUE, FALSE;
terminal String INTEGER;

/* operators */
terminal PLUS, BECOMES, AND, LESS,
         MINUS, TIMES, DEREF, BANG;

/* delimiters */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET,
         LBRACE, RBRACE, SEMICOLON, COMMA;
// ( ) [ ] { } ; ,

/* identifiers */
terminal String IDENTIFIER;


/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal FormalList FormalList;
nonterminal Formal Formal;
nonterminal Type Type;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal ExpList ExpressionList;
nonterminal Exp Expression;
nonterminal Identifier Identifier;

//nonterminal List<Statement> Program;
//nonterminal Statement Statement;
//nonterminal Assign AssignStatement;
//nonterminal Exp Expression;
//nonterminal Identifier Identifier;


/* Precedence declarations: */

precedence right BECOMES;
precedence left AND;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right BANG;
// This lbracket precedence left may be dubious; a post on Ed says it works out
// but that may be faulty.
precedence left DEREF, LBRACKET;


/* Productions: */

Program ::=
      MainClass:m {:
        RESULT = new Program(m, new ClassDeclList(mxright), mxleft);
    :}
    | MainClass:m ClassDeclList:l {:
        RESULT = new Program(m, l, mxleft);
    :};

ClassDeclList ::=
      ClassDeclList:l ClassDecl:c {:
        l.add(c);
        RESULT = l;
    :}
    | ClassDecl:c {:
        RESULT = new ClassDeclList(cxleft);
        RESULT.add(c);
    :};

MainClass ::= CLASS:c Identifier:i1 LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET RBRACKET Identifier:i2 RPAREN LBRACE Statement:s RBRACE RBRACE {:
    RESULT = new MainClass(i1, i2, s, cxleft);
:};

ClassDecl ::=
      CLASS:c Identifier:i LBRACE VarDeclList:vl MethodDeclList:ml RBRACE {:
        RESULT = new ClassDeclSimple(i, vl, ml, cxleft);
    :}
    | CLASS:c Identifier:i1 EXTENDS Identifier:i2 LBRACE VarDeclList:vl MethodDeclList:ml RBRACE {:
        RESULT = new ClassDeclExtends(i1, i2, vl, ml, cxleft);
    :};

VarDeclList ::=
      VarDeclList:l VarDecl:v {:
        l.add(v);
        RESULT = l;
    :}
    | VarDecl:v {:
        RESULT = new VarDeclList(vxleft);
        RESULT.add(v);
    :};

VarDecl ::= Type:t Identifier:i SEMICOLON {:
    RESULT = new VarDecl(t, i, txleft);
:};

MethodDeclList ::=
      MethodDeclList:l MethodDecl:m {:
        l.add(m);
        RESULT = l;
    :}
    | MethodDecl:m {:
        RESULT = new MethodDeclList(mxleft);
        RESULT.add(m);
    :};

MethodDecl ::=
      PUBLIC:p Type:t Identifier:i LPAREN:l RPAREN LBRACE VarDeclList:vl StatementList:sl RETURN Expression:e SEMICOLON RBRACE {:
        RESULT = new MethodDecl(t, i, new FormalList(lxright), vl, sl, e, pxleft);
    :}
    | PUBLIC:p Type:t Identifier:i LPAREN FormalList:fl RPAREN LBRACE VarDeclList:vl StatementList:sl RETURN Expression:e SEMICOLON RBRACE {:
        RESULT = new MethodDecl(t, i, fl, vl, sl, e, pxleft);
    :};

FormalList ::=
      Formal:p {:
        RESULT = new FormalList(pxleft);
    :}
    | FormalList:pl COMMA Formal:p {:
        pl.add(p);
        RESULT = pl;
    :};

Formal ::= Type:t Identifier:i {:
    RESULT = new Formal(t, i, txleft);
:};

StatementList ::=
      StatementList:sl Statement:s {:
        sl.add(s);
        RESULT = sl;
    :}
    | Statement:s {:
        RESULT = new StatementList(sxleft);
        RESULT.add(s);
    :};

Type ::=
      IDENTIFIER:i {:
        RESULT = new IdentifierType(i, ixleft);
    :}
    | INT:t {:
        RESULT = new IntegerType(txleft);
    :}
    | BOOLEAN:t {:
        RESULT = new BooleanType(txleft);
    :}
    | INT:t LBRACKET RBRACKET {:
        RESULT = new IntArrayType(txleft);
    :};

Statement ::=
      LBRACE:l StatementList:sl RBRACE {:
        RESULT = new Block(sl, lxleft);
    :}
    | LBRACE:l RBRACE {:
        RESULT = new Block(new StatementList(lxright), lxleft);
    :}
    | IF:i LPAREN Expression:e RPAREN Statement:s1 ELSE Statement:s2 {:
        RESULT = new If(e, s1, s2, ixleft);
    :}
    | WHILE:w LPAREN Expression:e RPAREN Statement:s {:
        RESULT = new While(e, s, wxleft);
    :}
    | SOPLN:s LPAREN Expression:e RPAREN SEMICOLON {:
        RESULT = new Print(e, sxleft);
    :}
    | Identifier:i BECOMES Expression:e SEMICOLON {:
        RESULT = new Assign(i, e, ixleft);
    :}
    | Identifier:i LBRACKET Expression:e1 RBRACKET BECOMES Expression:e2 SEMICOLON {:
        RESULT = new ArrayAssign(i, e1, e2, ixleft);
    :};

Expression ::=
      Expression:e1 AND Expression:e2 {:
        RESULT = new And(e1, e2, e1xleft);
    :}
    | Expression:e1 LESS Expression:e2 {:
        RESULT = new LessThan(e1, e2, e1xleft);
    :}
    | Expression:e1 PLUS Expression:e2 {:
        RESULT = new Plus(e1, e2, e1xleft);
    :}
    | Expression:e1 MINUS Expression:e2 {:
        RESULT = new Minus(e1, e2, e1xleft);
    :}
    | Expression:e1 TIMES Expression:e2 {:
        RESULT = new Times(e1, e2, e1xleft);
    :}
    | Expression:e1 LBRACKET Expression:e2 RBRACKET {:
        RESULT = new ArrayLookup(e1, e2, e1xleft);
    :}
    | Expression:e DEREF LENGTH {:
        RESULT = new ArrayLength(e, exleft);
    :}
    | Expression:e DEREF Identifier:i LPAREN ExpressionList:el RPAREN {:
        RESULT = new Call(e, i, el, exleft);
    :}
    | Expression:e DEREF Identifier:i LPAREN:l RPAREN {:
        RESULT = new Call(e, i, new ExpList(lxright), exleft);
    :}
    | TRUE:t {:
        RESULT = new True(txleft);
    :}
    | FALSE:f {:
        RESULT = new False(fxleft);
    :}
    | IDENTIFIER:i {:
        RESULT = new IdentifierExp(i, ixleft);
    :}
    | THIS:t {:
        RESULT = new This(txleft);
    :}
    | NEW:n INT LBRACKET Expression:e RBRACKET {:
        RESULT = new NewArray(e, nxleft);
    :}
    | NEW:n Identifier:i LPAREN RPAREN {:
        RESULT = new NewObject(i, nxleft);
    :}
    | BANG:b Expression:e {:
        RESULT = new Not(e, bxleft);
    :}
    | LPAREN:l Expression:e RPAREN {:
        RESULT = e;
    :}
    | INTEGER:i {:
        RESULT = new IntegerLiteral(Integer.parseInt(i), ixleft);
    :};

ExpressionList ::=
      Expression:e {:
        RESULT = new ExpList(exleft);
        RESULT.add(e);
    :}
    | ExpressionList:l COMMA Expression:e {:
        l.add(e);
        RESULT = l;
    :};

Identifier ::= IDENTIFIER:i {:
    RESULT = new Identifier(i, ixleft);
:};


// Program ::=
//    Statement:s {:
//        List<Statement> p = new LinkedList<Statement>();
//        p.add(s);
//        RESULT = p;
//    :}
//    | Program:p Statement:s {:
//        p.add(s);
//        RESULT = p;
//    :};
//
//Statement ::= AssignStatement:s {:
//    RESULT = s;
//:};
//
//AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON {:
//    RESULT = new Assign(id, expr, idxleft);
//:};
//
//Identifier ::= IDENTIFIER:id {:
//    RESULT = new Identifier(id, idxleft);
//:};
//
//Expression ::=
//    IDENTIFIER:name {:
//        RESULT = new IdentifierExp(name, namexleft);
//    :}
//    | Expression:arg1 PLUS Expression:arg2 {:
//        RESULT = new Plus(arg1, arg2, arg1xleft);
//    :}
//    | LPAREN Expression:expr RPAREN {:
//        RESULT = expr;
//    :};
