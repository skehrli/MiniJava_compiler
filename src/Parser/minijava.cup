/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal CLASS, PUBLIC, STATIC, VOID,
         MAIN, EXTENDS, THIS, NEW, STRING, SOPLN, LENGTH;

/* control flow constructs */
terminal IF, ELSE, WHILE, RETURN;

/* types */
terminal INT, BOOLEAN;

/* constants */
terminal TRUE, FALSE;
terminal String INTEGER;

/* operators */
terminal PLUS, BECOMES, AND, LESS,
         MINUS, TIMES, DEREF, BANG;

/* delimiters */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET,
         LBRACE, RBRACE, SEMICOLON, COMMA;
// ( ) [ ] { } ; ,

/* identifiers */
terminal String IDENTIFIER;


/* Nonterminals (constructed by parser): */

nonterminal Program Program;
nonterminal MainClass MainClass;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDeclSimple ClassDeclSimple;
nonterminal ClassDeclExtends ClassDeclExtends;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodDeclNoParams MethodDeclNoParams;
nonterminal MethodDeclParams MethodDeclParams;
nonterminal ParamList ParamList;
nonterminal Param Param;
nonterminal Type Type;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal ExpList ExpressionList;
nonterminal Op Operator;
nonterminal Exp Expression;
nonterminal Identifier Identifier;


/* Precedence declarations: */

precedence left BECOMES;
precedence left AND;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence right BANG;
precedence left DEREF;


/* Productions: */

Program ::= MainClass | MainClass ClassDeclList;

ClassDeclList ::= ClassDeclList ClassDecl | ClassDecl;

MainClass ::= CLASS Identifier LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACKET Identifier RBRACKET RPAREN RBRACE;

ClassDecl ::= ClassDeclSimple | ClassDeclExtends;

ClassDeclSimple ::= CLASS Identifier LBRACE VarDeclList MethodDeclList RBRACE;

ClassDeclExtends ::= CLASS Identifier EXTENDS Identifier LBRACE VarDeclList MethodDeclList RBRACE;

VarDeclList ::= VarDeclList VarDecl | VarDecl;

VarDecl ::= Type Identifier SEMICOLON;

MethodDeclList ::= MethodDeclList MethodDecl | MethodDecl;

MethodDecl ::= MethodDeclNoParams | MethodDeclParams;

MethodDeclNoParams ::= PUBLIC Type Identifier LPAREN RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE;

MethodDeclParams ::= PUBLIC Type Identifier LPAREN ParamList RPAREN LBRACE VarDeclList StatementList RETURN Expression SEMICOLON RBRACE;

ParamList ::= Param | Param COMMA ParamList;

Param ::= Type Identifier;

StatementList ::= StatementList Statement | Statement;

Type ::= Identifier | INT | BOOLEAN | INT LBRACKET RBRACKET;

Statement ::= LBRACE Statement RBRACE | LBRACE RBRACE
              | IF LPAREN Expression RPAREN Statement ELSE Statement
              | WHILE LPAREN Expression RPAREN Statement
              | SOPL LPAREN Expression RPAREN SEMICOLON
              | IDENTIFIER BECOMES Expression SEMICOLON
              | IDENTIFIER LBRACKET Expression RBRACKET BECOMES Expression SEMICOLON
              ;
Expression ::= Expression Operator Expression
               | Expression LBRACKET Expression RBRACKET
               | Expression DEREF LENGTH
               | Expression DEREF Identifier LPAREN ExpressionList RPAREN
               | Expression DEREF Identifier LPAREN RPAREN
               | TRUE;
               | FALSE;
               | Identifier;
               | THIS;
               | NEW INT LBRACKET Expression RBRACKET;
               | NEW Identifier LPAREN RPAREN;
               | BANG Expression;
               | LPAREN Expression RPAREN;
               | INTEGER;
               ;

ExpressionList ::= Expression | ExpressionList COMMA Expression

Operator ::= AND | LESS | PLUS | MINUS | TIMES;

Identifier ::= IDENTIFIER;


/* Program ::= Statement:s
            {: List<Statement> p = new LinkedList<Statement>();
               p.add(s);
               RESULT = p; :}
        | Program:p Statement:s
            {: p.add(s); RESULT = p; :};

Statement   ::= AssignStatement:s
                {: RESULT = s; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};

Expression    ::= IDENTIFIER:name
            {: RESULT = new IdentifierExp(name, namexleft); :}
        | Expression:arg1 PLUS Expression:arg2
            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :};
*/
