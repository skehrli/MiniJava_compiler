/**
 * CUP specification of the language grammar for a simple demo language.
 * Change this into the language grammar of MiniJava for your implementation.
 *
 * CSE 401/M501/P501 19au, 20sp
 */

package Parser;

import AST.*;
import java.util.*;
import java_cup.runtime.*;

/* Terminals (lexical tokens returned by the scanner): */

/* reserved words */
terminal CLASS, PUBLIC, STATIC, VOID,
         MAIN, EXTENDS, THIS, NEW, STRING, SOPLN, LENGTH;

/* control flow constructs */
terminal IF, ELSE, WHILE, RETURN;

/* types */
terminal INT, BOOLEAN;

/* constants */
terminal TRUE, FALSE;
terminal String INTEGER;

/* operators */
terminal PLUS, BECOMES, AND, LESS,
         MINUS, TIMES, DEREF, BANG;

/* delimiters */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET,
         LBRACE, RBRACE, SEMICOLON, COMMA;
// ( ) [ ] { } ; ,

/* identifiers */
terminal String IDENTIFIER;


/* Nonterminals (constructed by parser): */

nonterminal List<Statement> Program;
nonterminal Statement Statement;
nonterminal Assign AssignStatement;
nonterminal Exp Expression;
nonterminal Identifier Identifier;


/* Precedence declarations: */

precedence left PLUS;


/* Productions: */

Program ::= Statement:s
            {: List<Statement> p = new LinkedList<Statement>();
               p.add(s);
               RESULT = p; :}
        | Program:p Statement:s
            {: p.add(s); RESULT = p; :};

Statement   ::= AssignStatement:s
                {: RESULT = s; :};

AssignStatement ::= Identifier:id BECOMES Expression:expr SEMICOLON
                    {: RESULT = new Assign(id, expr, idxleft); :};

Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idxleft); :};

Expression    ::= IDENTIFIER:name
            {: RESULT = new IdentifierExp(name, namexleft); :}
        | Expression:arg1 PLUS Expression:arg2
            {: RESULT = new Plus(arg1, arg2, arg1xleft); :}
        | LPAREN Expression:expr RPAREN
            {: RESULT = expr; :};
